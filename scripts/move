#!/usr/bin/python

import rospy
import roslib
import tf
import sys
import actionlib

from math import cos, sin
from geometry_msgs.msg import *
from cb_base_navigation_msgs.srv import *
from cb_base_navigation_msgs.msg import *

if len(sys.argv) < 3:
    sys.exit('Usage: ./move \'frame\' \'constraint\' \'orientation_frame\' \'lookat_x\' \'lookat_y\' \'offset\'')

frame = sys.argv[1]
constraint = sys.argv[2]

rospy.init_node('move')

plan_pub = rospy.Publisher('local_planner/action_server/goal', LocalPlannerActionGoal, queue_size=20)
get_plan_client = rospy.ServiceProxy("global_planner/get_plan_srv", GetPlan)

pcs = []
pc = PositionConstraint()
pc.constraint = constraint
pc.frame = frame
pcs.append(pc)

rospy.loginfo("Requesting plan from %s" % get_plan_client.resolved_name)

try:
    resp = get_plan_client(pcs)
except:
    print("Could not get plan from global planner via service call, is the global planner running?")
    sys.exit()

if (len(resp.plan) == 0):
    print("Global planner could not find a valid plan. I'm bailing out.")
    sys.exit()

# Push the plan to the local planner
oc = OrientationConstraint()
if len(sys.argv) > 3:
    oc.frame = sys.argv[3]
else:
    oc.frame = frame

if len(sys.argv) > 6:
    oc.look_at.x = sys.argv[4]
    oc.look_at.x = sys.argv[5]
    oc.look_at.x = sys.argv[6]

if len(sys.argv) > 7:
    oc.angle_offset = sys.argv[7]

goal = LocalPlannerActionGoal()
goal.goal.plan = resp.plan
goal.goal.orientation_constraint = oc

rospy.sleep(1) # Wait a second for the publisher initialization
rospy.loginfo("Publishing plan on %s" % plan_pub.name)
plan_pub.publish(goal)

print("Plan and orientation constraint published to local planner :)")

